package interfaz;

import java.awt.EventQueue;
import java.io.File;
import java.time.LocalDate;
import java.time.Period;
import java.time.format.DateTimeParseException;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import javax.swing.DefaultComboBoxModel;
import javax.swing.GroupLayout;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.GroupLayout.Alignment;
import javax.swing.LayoutStyle.ComponentPlacement;

import business.Person;
import business.Person.Department;
import javax.swing.JTextField;
import javax.swing.JButton;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;

import java.io.FileWriter;
import java.io.FileReader;
import java.io.BufferedWriter;
import java.io.BufferedReader;
import java.util.Scanner;
import java.io.PrintWriter;
import java.io.IOException;
import java.io.FileNotFoundException;

/**
 * Clase que sirve para crear las instancias de la clase Person. 
 * @author Jaime Serrano Quílez
 * @version Final
 * @date 24-02-2023
 *
 */
public class CreateJPanel extends javax.swing.JPanel {
	
	
/**
 * Función de tipo booleana para comprobar si los datos introducidos por el usuario en los diferentes campos de texto cumplan con un formato
 * Para ello, se han empleado expresiones regulares para la mayoría de los datos
 * @param dato (es el String que se obtiene de los diferentes campos de texto de la aplicación)
 * @param expresion (son las expresiones regulares que se emplean como parámetro para comprobar si los datos introducidos por el usuario cumplen con el formato requerido en cada apartado)
 * @return devuelve verdadero si los datos coinciden con la expresión regular. Devuelve falso en caso contrario.
 */
	boolean comprobarFormato(String dato, String expresion) {
		Pattern pat = Pattern.compile(expresion);
		Matcher mat = pat.matcher(dato);
		if (mat.matches()) {
			return true;
		} else {
			return false;
		}
	}
	
    /**
     * Creates new form ControlJPanel
     */
    Person person;
    public CreateJPanel(Person person) {
        initComponents();
        this.person=person;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        picTextPath = new javax.swing.JTextField();
        createBtn = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        nameTextField = new javax.swing.JTextField();
        geoTextField = new javax.swing.JTextField();
        dobTextField = new javax.swing.JTextField();
        phoneTextField = new javax.swing.JTextField();
        ssnTextField = new javax.swing.JTextField();
        emailTextField = new javax.swing.JTextField();
        bankTextField = new javax.swing.JTextField();

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setText("CREAR PERFIL");

        jButton1.setText("Selecc. Foto");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        picTextPath.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                picTextPathActionPerformed(evt);
            }
        });

        createBtn.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        createBtn.setText("Crear");
        createBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createBtnActionPerformed(evt);
            }
        });

        jLabel2.setText("Nombre");

        jLabel3.setText("País");

        jLabel4.setText("Fecha Nacim");

        jLabel5.setText("Teléfono:");

        jLabel7.setText("Email: ");

        jLabel8.setText("Número Seguridad Social");

        jLabel9.setText("Cuenta Bancaria");

        emailTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                emailTextFieldActionPerformed(evt);
            }
        });
        
        JLabel jLabel10 = new JLabel("Departamento");
        
        JLabel fechIncorpTextField = new JLabel("Fecha Incorp");
        
        fechaincTextField = new JTextField();
        fechaincTextField.setColumns(10);
        
        comboBox = new JComboBox();
        comboBox.setModel(new DefaultComboBoxModel(Department.values()));
        
        sueldoTextField = new JTextField();
        sueldoTextField.setColumns(10);
        
        JLabel jLabel11 = new JLabel("Sueldo");
        
        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        layout.setHorizontalGroup(
        	layout.createParallelGroup(Alignment.LEADING)
        		.addGroup(layout.createSequentialGroup()
        			.addGap(372)
        			.addComponent(jLabel1)
        			.addGap(0, 0, Short.MAX_VALUE))
        		.addGroup(layout.createSequentialGroup()
        			.addGap(59)
        			.addGroup(layout.createParallelGroup(Alignment.LEADING)
        				.addGroup(layout.createSequentialGroup()
        					.addComponent(fechIncorpTextField)
        					.addContainerGap())
        				.addGroup(layout.createSequentialGroup()
        					.addGroup(layout.createParallelGroup(Alignment.TRAILING)
        						.addGroup(layout.createSequentialGroup()
        							.addGroup(layout.createParallelGroup(Alignment.LEADING)
        								.addComponent(jLabel8)
        								.addComponent(jLabel9)
        								.addComponent(jLabel11))
        							.addPreferredGap(ComponentPlacement.RELATED)
        							.addGroup(layout.createParallelGroup(Alignment.TRAILING)
        								.addComponent(bankTextField, GroupLayout.DEFAULT_SIZE, 154, Short.MAX_VALUE)
        								.addComponent(ssnTextField, Alignment.LEADING, GroupLayout.DEFAULT_SIZE, 154, Short.MAX_VALUE)
        								.addComponent(fechaincTextField, Alignment.LEADING, GroupLayout.DEFAULT_SIZE, 154, Short.MAX_VALUE)
        								.addComponent(sueldoTextField, Alignment.LEADING, GroupLayout.DEFAULT_SIZE, 154, Short.MAX_VALUE)))
        						.addGroup(layout.createSequentialGroup()
        							.addComponent(jLabel3)
        							.addPreferredGap(ComponentPlacement.RELATED, 70, Short.MAX_VALUE)
        							.addComponent(geoTextField, GroupLayout.PREFERRED_SIZE, 244, GroupLayout.PREFERRED_SIZE))
        						.addGroup(layout.createSequentialGroup()
        							.addComponent(jLabel5)
        							.addGap(28, 277, Short.MAX_VALUE))
        						.addGroup(layout.createSequentialGroup()
        							.addComponent(jLabel7)
        							.addPreferredGap(ComponentPlacement.RELATED, 54, Short.MAX_VALUE)
        							.addComponent(emailTextField, GroupLayout.PREFERRED_SIZE, 244, GroupLayout.PREFERRED_SIZE))
        						.addGroup(layout.createSequentialGroup()
        							.addComponent(jLabel4)
        							.addPreferredGap(ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        							.addComponent(dobTextField, GroupLayout.PREFERRED_SIZE, 244, GroupLayout.PREFERRED_SIZE))
        						.addGroup(layout.createSequentialGroup()
        							.addComponent(jLabel2)
        							.addPreferredGap(ComponentPlacement.RELATED, 45, Short.MAX_VALUE)
        							.addComponent(nameTextField, GroupLayout.PREFERRED_SIZE, 244, GroupLayout.PREFERRED_SIZE))
        						.addGroup(layout.createSequentialGroup()
        							.addComponent(jLabel10)
        							.addPreferredGap(ComponentPlacement.RELATED)
        							.addGroup(layout.createParallelGroup(Alignment.TRAILING)
        								.addComponent(comboBox, 0, 229, Short.MAX_VALUE)
        								.addComponent(phoneTextField, Alignment.LEADING, GroupLayout.DEFAULT_SIZE, 229, Short.MAX_VALUE))))
        					.addGap(12)
        					.addComponent(picTextPath, GroupLayout.PREFERRED_SIZE, 149, GroupLayout.PREFERRED_SIZE)
        					.addPreferredGap(ComponentPlacement.UNRELATED)
        					.addComponent(jButton1)
        					.addGap(39))))
        		.addGroup(layout.createSequentialGroup()
        			.addGap(213)
        			.addComponent(createBtn)
        			.addContainerGap(439, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
        	layout.createParallelGroup(Alignment.LEADING)
        		.addGroup(layout.createSequentialGroup()
        			.addGap(47)
        			.addGroup(layout.createParallelGroup(Alignment.TRAILING)
        				.addGroup(layout.createSequentialGroup()
        					.addComponent(jLabel1)
        					.addGap(55)
        					.addComponent(jLabel3))
        				.addGroup(layout.createSequentialGroup()
        					.addGroup(layout.createParallelGroup(Alignment.BASELINE)
        						.addComponent(nameTextField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        						.addComponent(picTextPath, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        						.addComponent(jButton1)
        						.addComponent(jLabel2))
        					.addPreferredGap(ComponentPlacement.RELATED)
        					.addComponent(geoTextField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)))
        			.addPreferredGap(ComponentPlacement.RELATED)
        			.addGroup(layout.createParallelGroup(Alignment.BASELINE)
        				.addComponent(dobTextField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        				.addComponent(jLabel4))
        			.addPreferredGap(ComponentPlacement.RELATED)
        			.addGroup(layout.createParallelGroup(Alignment.LEADING)
        				.addComponent(jLabel5)
        				.addComponent(phoneTextField, Alignment.TRAILING, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
        			.addPreferredGap(ComponentPlacement.RELATED)
        			.addGroup(layout.createParallelGroup(Alignment.BASELINE)
        				.addComponent(jLabel10)
        				.addComponent(comboBox, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
        			.addGap(5)
        			.addGroup(layout.createParallelGroup(Alignment.BASELINE)
        				.addComponent(emailTextField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        				.addComponent(jLabel7))
        			.addPreferredGap(ComponentPlacement.RELATED)
        			.addGroup(layout.createParallelGroup(Alignment.BASELINE)
        				.addComponent(jLabel8)
        				.addComponent(ssnTextField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
        			.addPreferredGap(ComponentPlacement.RELATED)
        			.addGroup(layout.createParallelGroup(Alignment.TRAILING)
        				.addComponent(jLabel9)
        				.addComponent(bankTextField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
        			.addPreferredGap(ComponentPlacement.RELATED)
        			.addGroup(layout.createParallelGroup(Alignment.BASELINE)
        				.addComponent(fechIncorpTextField)
        				.addComponent(fechaincTextField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
        			.addPreferredGap(ComponentPlacement.RELATED)
        			.addGroup(layout.createParallelGroup(Alignment.BASELINE)
        				.addComponent(sueldoTextField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        				.addComponent(jLabel11))
        			.addGap(28)
        			.addComponent(createBtn))
        );
        this.setLayout(layout);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        JFileChooser chooser = new JFileChooser();
        chooser.showOpenDialog(null);
        File f= chooser.getSelectedFile();
        String fileName= f.getAbsolutePath();
        picTextPath.setText(fileName);
        
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void picTextPathActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_picTextPathActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_picTextPathActionPerformed

    /**
     * Botón para crear un objeto de la clase persona y añadirlo a la lista de empleados
     * @param evt 
     * Este botón comprueba antes de crear a la persona si todos los campos de texto están rellenados por el usuario y, una vez completados, se comprueba si cumple con las expresiones regulares
     * correspondientes. Si lo cumplen, todas las variables booleanas pasan a true y se crea una nueva persona.
     */
    private void createBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createBtnActionPerformed
        // TODO add your handling code here:
        
    	boolean comprobarNombre=true;
    	boolean comprobarPais=true;
    	boolean comprobarFechaNacimiento=true;
    	boolean comprobarCuentaBancaria=true;
    	boolean comprobarEmail=true;
    	boolean comprobarSeguridadSocial=true;
    	boolean comprobarMovil=true;
    	boolean comprobarImagen=true;
    	boolean comprobarSueldo=true;
    	
    		if (nameTextField.getText().equals("")) {
    			JOptionPane.showMessageDialog(null, "Introduce el nombre", "WARNING_MESSAGE", JOptionPane.WARNING_MESSAGE);
    		} else {
    			comprobarNombre=comprobarFormato(nameTextField.getText(), "^\\w{1,50}$");
    			if (!comprobarNombre) {
        			JOptionPane.showMessageDialog(null, "Formato de nombre incorrecto", "ERROR_MESAGE", JOptionPane.ERROR_MESSAGE);
    		}
    	}
 
    	if (geoTextField.getText().equals("")) {
    		JOptionPane.showMessageDialog(null, "Introduce el país", "WARNING_MESAGE", JOptionPane.WARNING_MESSAGE);
    	} else {
    		comprobarPais=comprobarFormato(geoTextField.getText(), "^\\D{1,50}$");
    		if (!comprobarPais) {
    			JOptionPane.showMessageDialog(null, "Formato de país incorrecto", "ERROR_MESAGE", JOptionPane.ERROR_MESSAGE);
    		} 
    	}
    	
    		
    	if ((dobTextField.getText().equals("")) && (fechaincTextField.getText().equals(""))) {
    		JOptionPane.showMessageDialog(null, "Introduce la fecha de nacimiento en formato YYYY-MM-DD", "WARNING_MESAGE", JOptionPane.WARNING_MESSAGE);
    		JOptionPane.showMessageDialog(null, "Introduce la fecha de incorporación a la empresa en formato YYYY-MM-DD", "WARNING_MESAGE", JOptionPane.WARNING_MESSAGE);
    	} else {
    		try {
    	    	LocalDate edad = LocalDate.parse(dobTextField.getText());
    	    	LocalDate fechaIncorp = LocalDate.parse(fechaincTextField.getText());
    	    	Period p = Period.between(edad, fechaIncorp);
    	    	if (p.getYears()<18) {
    	    		JOptionPane.showMessageDialog(null, "Tienes que ser mayor de edad para formar parte de la empresa", "ERROR_MESSAGE", JOptionPane.ERROR_MESSAGE);
    	    		comprobarFechaNacimiento=false;
    	    	} else {
    	    		comprobarFechaNacimiento=true;
    	    	}
    	    	} catch (DateTimeParseException e) {
    	    		JOptionPane.showMessageDialog(null, "Formato de fecha incorrecto, el formato debe ser YYYY-MM-DD", "ERROR_MESAGE", JOptionPane.ERROR_MESSAGE);
    	    	}
    	}
    	
    	if (bankTextField.getText().equals("")) {
    		JOptionPane.showMessageDialog(null, "Introduce el número de cuenta bancaria", "WARNING_MESAGE", JOptionPane.WARNING_MESSAGE);
    	} else {
    		comprobarCuentaBancaria=comprobarFormato(bankTextField.getText(), "^[A-Z]{2}\\d{2}-\\d{4}-\\d{4}-\\d{2}-\\d{10}$");
    		if (!comprobarCuentaBancaria) {
    			JOptionPane.showMessageDialog(null, "Formato de cuenta bancaria incorrecto", "ERROR_MESAGE", JOptionPane.ERROR_MESSAGE);
    		}
    		
    	}
    	
    	if (emailTextField.getText().equals("")) {
    		JOptionPane.showMessageDialog(null, "Introduce el email", "WARNING_MESAGE", JOptionPane.WARNING_MESSAGE);
    		comprobarEmail=false;
    	} else if (emailTextField.getText().indexOf('@')==-1) {
    		JOptionPane.showMessageDialog(null, "Falta el arroba", "ERROR_MESAGE", JOptionPane.ERROR_MESSAGE);
    		comprobarEmail=false;
    	} else if (emailTextField.getText().indexOf('.')==-1) {
    		JOptionPane.showMessageDialog(null, "Falta el punto", "ERROR_MESAGE", JOptionPane.ERROR_MESSAGE);
    		comprobarEmail=false;
    	} else if (emailTextField.getText().indexOf('@')>emailTextField.getText().indexOf('.')) {
    		JOptionPane.showMessageDialog(null, "El arroba debe ir antes del punto", "ERROR_MESAGE", JOptionPane.ERROR_MESSAGE);
    		comprobarEmail=false;
    	} else if (emailTextField.getText().length() - emailTextField.getText().indexOf('.')==2) {
    		JOptionPane.showMessageDialog(null, "Pocos caracteres tras el punto", "ERROR_MESAGE", JOptionPane.ERROR_MESSAGE);
    		 comprobarEmail=false;
    	} else if (emailTextField.getText().length() - emailTextField.getText().indexOf('.')>4) {
    		JOptionPane.showMessageDialog(null, "Demasiados caracteres tras el punto", "ERROR_MESAGE", JOptionPane.ERROR_MESSAGE);
    		comprobarEmail=false;
    	} else {
    		comprobarEmail=true;
    	}
    	
    	if (ssnTextField.getText().equals("")) {
    		JOptionPane.showMessageDialog(null, "Introduce el número de la Seguridad Social", "WARNING_MESAGE", JOptionPane.WARNING_MESSAGE);
    	} else {if (picTextPath.getText().equals("")) {
    		JOptionPane.showMessageDialog(null, "Selecciona una imagen", "WARNING_MESAGE", JOptionPane.WARNING_MESSAGE);
    	} else {
    		
    	}
    		comprobarSeguridadSocial=comprobarFormato(ssnTextField.getText(), "^\\d{10}$");
    		if (!comprobarSeguridadSocial) {
        		JOptionPane.showMessageDialog(null, "Formato de número de seguridad social incorrecto", "ERROR_MESAGE", JOptionPane.ERROR_MESSAGE);
        	}
    	}
    	
    	if (phoneTextField.getText().equals("")) {
    		JOptionPane.showMessageDialog(null, "Introduce el número de móvil", "WARNING_MESAGE", JOptionPane.WARNING_MESSAGE);
    	} else {
    		comprobarMovil=comprobarFormato(phoneTextField.getText(), "^[67]\\d{8}");
    		if (!comprobarMovil) {
        		JOptionPane.showMessageDialog(null, "Formato de número de móvil incorrecto", "ERROR_MESAGE", JOptionPane.ERROR_MESSAGE);
        	}
    	}
    	
    	if (picTextPath.getText().equals("")) {
    		JOptionPane.showMessageDialog(null, "Selecciona una imagen", "WARNING_MESAGE", JOptionPane.WARNING_MESSAGE);
    	} else {
    		comprobarImagen=true;
    	}
    	
    	if (sueldoTextField.getText().equals("")) {
    		JOptionPane.showMessageDialog(null, "Introduzca el sueldo", "WARNING_MESSAGE", JOptionPane.WARNING_MESSAGE);
    	} else {
    		comprobarSueldo=comprobarFormato(sueldoTextField.getText(), "\\d+");
    		if (!comprobarSueldo) {
    			JOptionPane.showMessageDialog(null, "El sueldo debe ser un número", "ERROR_MESAGE", JOptionPane.ERROR_MESSAGE);
    		}
    	}
    	
    	if ((comprobarNombre) && (comprobarPais) && (comprobarFechaNacimiento) && (comprobarCuentaBancaria) && (comprobarEmail) && (comprobarSeguridadSocial) && (comprobarMovil) && (comprobarImagen) && (comprobarSueldo)) {
        person.setImagen(picTextPath.getText());
        person.setNombre(nameTextField.getText());
        person.setFechaNacimiento(dobTextField.getText());
        person.setCuentaBancaria(bankTextField.getText());
        person.setEmail(emailTextField.getText());
        person.setNumeroSeguridadSocial(ssnTextField.getText());
        person.setMovil(phoneTextField.getText());
        person.setPais(geoTextField.getText());
        person.setFechaIncorp(fechaincTextField.getText());
        String departamento = comboBox.getSelectedItem().toString();
         person.setDepartmento((Department.valueOf(departamento)));
         person.setSueldo(Integer.parseInt(sueldoTextField.getText()));
         
        Person p = new Person(nameTextField.getText(), geoTextField.getText(), dobTextField.getText(), phoneTextField.getText(), Department.valueOf(departamento), emailTextField.getText(), ssnTextField.getText(), bankTextField.getText(), fechaincTextField.getText(), picTextPath.getText(), Integer.parseInt(sueldoTextField.getText()));
        
        MainJFrame.listaPersonas.add(p);
        JOptionPane.showMessageDialog(null, "¡PERFIL CREADO CON ÉXITO!");
        
    	}
        
    }//GEN-LAST:event_createBtnActionPerformed

    private void emailTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_emailTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_emailTextFieldActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField bankTextField;
    private javax.swing.JButton createBtn;
    private javax.swing.JTextField dobTextField;
    private javax.swing.JTextField emailTextField;
    private javax.swing.JTextField geoTextField;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JTextField nameTextField;
    private javax.swing.JTextField phoneTextField;
    private javax.swing.JTextField picTextPath;
    private javax.swing.JTextField ssnTextField;
    private JTextField fechaincTextField;
    private JComboBox comboBox;
    private JTextField sueldoTextField;
}
