package interfaz;

import java.awt.EventQueue;
import java.awt.Image;

import javax.swing.JFrame;
import javax.swing.JOptionPane;

import business.Person;
import business.Person.Department;

import javax.swing.JButton;
import javax.swing.GroupLayout.Alignment;
import javax.imageio.ImageIO;
import javax.swing.GroupLayout;
import javax.swing.ImageIcon;
import javax.swing.LayoutStyle.ComponentPlacement;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.image.BufferedImage;
import java.io.FileWriter;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Scanner;

/**
 * Esta es la aplicación principal del programa, en las que el usuario puede elegir entre 6 botones que hacen diferentes funciones.
 * Los botones son: 1. Crear perfil (crea un perfil a partir de los datos introducidos por el usuario), 
 * 2. Guardar perfil (Se guarda el perfil creado en un fichero).
 * 3. Cargar perfil (Se cargan los perfiles que se hayan guardado en un fichero).
 * 4. Mostrar perfiles (Se muestran todos los perfiles de todos los usuarios creados y guardados en el sistema).
 * 5. Anterior (Se muestra el perfil anterior)
 * 6. Siguiente (Se muestra el siguiente perfil)
 * @author Jaime Serrano Quílez
 * @version Final
 * @date 24-02-2023
 *
 */
public class MainJFrame extends javax.swing.JFrame {

	/**
     * Creates new form MainJFrame
     */
    /**
     * Declaración del ArrayList para crear la lista que contengan a los diferentes objetos de la clase Person que se creen.
     * Declaración de un contador para que los botones Siguiente y Anterior muestren los perfiles que tocan
     */
	Person person;
	static ArrayList<Person> listaPersonas = new ArrayList<>();
    public MainJFrame() {
        initComponents();
        person = new Person();
    }
    
   static  int contador=0;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane1 = new javax.swing.JSplitPane();
        controlJPanel = new javax.swing.JPanel();
        createPerson = new javax.swing.JButton();
        viewPerson = new javax.swing.JButton();
        displayJPanel = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        createPerson.setText("Crear Perfil");
        createPerson.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createPersonActionPerformed(evt);
            }
        });

        viewPerson.setText("Mostrar Perfil");
        viewPerson.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewPersonActionPerformed(evt);
            }
        });
        
        /**
         * Botón que sirve para guardar los datos de los perfiles que se creen en el CreateJPanel en el fichero logint.txt
         * Para ello, se emplea un BufferedReader. 
         * En caso de que no se haya creado ningún perfil, salta un mensaje de aviso al usuario para que cree primero un perfil. Solo guarda un perfil cada vez
         */
        JButton guardarPersona = new JButton("Guardar Perfil");
        guardarPersona.addMouseListener(new MouseAdapter() {
        	@Override
        	public void mouseClicked(MouseEvent e) {
        		try {
        			BufferedWriter bwPerfil = new BufferedWriter (new FileWriter("login.txt", true));
        			if (listaPersonas.size()==0) {
        				JOptionPane.showMessageDialog(null, "Error, no hay ningún perfil creado");
        			} else {
        			bwPerfil.append(person.getNombre() + " \n" + person.getPais() + "\n"+ person.getFechaNacimiento() +  "\n" +person.getMovil() + "\n" +  String.valueOf(person.getDepartamento())+ "\n" + person.getEmail() + "\n" + person.getNumeroSeguridadSocial() +  "\n" +person.getCuentaBancaria() +  "\n" +person.getFechaIncorp() + "\n" + person.getImagen() +"\n" + String.valueOf(person.getCodEmpleado()) +"\n" + String.valueOf(person.getSueldo()) + "\n");
        			bwPerfil.close();
        			JOptionPane.showMessageDialog(null, "¡Perfil guardado satisfactoriamente!");
        			}
        		} catch (IOException e1) {
        			JOptionPane.showMessageDialog(null, "Error. No se ha podido guardar los datos en el fichero", "WARNING_MESSAGE", JOptionPane.WARNING_MESSAGE);
        		}
        	}
        });
        
        /**
         * Botón que sirve para leer los datos del fichero login.txt y así crear una nueva instancia de la clase Person y mostrar los datos en el DisplayJPanel
         * En caso de que el fichero esté vacío, se muestra un mensaje de aviso al usuario. 
         */
        JButton cargarPersona = new JButton("Cargar Perfil");
        cargarPersona.addMouseListener(new MouseAdapter() {
        	@Override
        	public void mouseClicked(MouseEvent e) {
        		try {
        			listaPersonas.clear();
        			BufferedReader brPerfil = new BufferedReader (new FileReader("login.txt"));
        			if (!brPerfil.ready()) {
        				JOptionPane.showMessageDialog(null, "El fichero está vacío", "WARNING_MESSAGE", JOptionPane.WARNING_MESSAGE);
        				brPerfil.close();
        			} else {
        			Scanner s1 = new Scanner(brPerfil);
        			while (s1.hasNextLine()) {
        			String nombre=s1.nextLine();
        			String pais = s1.nextLine();
        			String fechaNacimiento=s1.nextLine();
        			String movil=s1.nextLine();
        			String departamento=s1.nextLine();
        			String email=s1.nextLine();
        			String numSeguridadSocial=s1.nextLine();
        			String cuentaBancaria=s1.nextLine();
        			String fechaIncorporacion=s1.nextLine();
        			String imagen=s1.nextLine();
        			String codigo=s1.nextLine();
        			String sueldo=s1.nextLine();
					listaPersonas.add(new Person(nombre, pais, fechaNacimiento, movil, Department.valueOf(departamento), email, numSeguridadSocial, cuentaBancaria, fechaIncorporacion, imagen, Integer.parseInt(sueldo))); 
        			}
        			brPerfil.close();
        			JOptionPane.showMessageDialog(null, "Perfil(es) cargado(s) satisfactoriamente");
        			}
        		}catch (FileNotFoundException e1) {
        			JOptionPane.showMessageDialog(null, "Error. No se ha encontrado el fichero", "ERROR_MESSAGE", JOptionPane.ERROR_MESSAGE);
        		} catch (IOException e1) {
        			JOptionPane.showMessageDialog(null, "No se ha podido leer del fichero", "WARNING_MESSAGE", JOptionPane.WARNING_MESSAGE);
        		}
        	}
        });
        
        /**
         * Botón que utiliza la variable de clase contador y lo decrementa en 1 para mostrar el elemento de la lista correspondiente al valor del contador.
         * Si ya no hay más perfiles que mostrar se avisa al usuario.
         */
        JButton antPerfil = new JButton("Anterior");
        antPerfil.addMouseListener(new MouseAdapter() {
        	@Override
        	public void mouseClicked(MouseEvent e) {
        		try {
        		contador--;
        		if (contador<0) {
        			JOptionPane.showMessageDialog(null, "No hay más perfiles");
        		} else {
        			DisplayJPanel viewJPanel= new DisplayJPanel(listaPersonas.get(contador));
     		       jSplitPane1.setRightComponent(viewJPanel);
        		}
        	} catch (NullPointerException e1) {
    			JOptionPane.showMessageDialog(null, "No hay ningún perfil creado", "ERROR_MESSAGE", JOptionPane.ERROR_MESSAGE);
    		} catch (IndexOutOfBoundsException e1) {
    			JOptionPane.showMessageDialog(null, "No hay más elementos de la lista" );
    			contador++;
    		}
        	}
        });
        
        /**
         * Botón que utiliza la variable de clase contador y lo decrementa en 1 para mostrar el elemento de la lista correspondiente al valor del contador.
         * Si ya no hay más perfiles que mostrar se avisa al usuario.
         */
        JButton sigPerfil = new JButton("Siguiente");
        sigPerfil.addMouseListener(new MouseAdapter() {
        	@Override
        	public void mouseClicked(MouseEvent e) {
        		contador++;
        		try {
        		if (contador>listaPersonas.size()) {
        			JOptionPane.showMessageDialog(null, "Este es el último perfil", "WARNING_MESSAGE", JOptionPane.WARNING_MESSAGE);
        		} else {
        			 DisplayJPanel viewJPanel= new DisplayJPanel(listaPersonas.get(contador));
        		       jSplitPane1.setRightComponent(viewJPanel);
        			        		}
        		} catch (NullPointerException e1) {
        			JOptionPane.showMessageDialog(null, "No hay ningún perfil creado", "ERROR_MESSAGE", JOptionPane.ERROR_MESSAGE);
        		} catch (IndexOutOfBoundsException e1) {
        			JOptionPane.showMessageDialog(null, "No hay más elementos de la lista" );
        			contador--;
        		}
        	}
        });

        javax.swing.GroupLayout controlJPanelLayout = new javax.swing.GroupLayout(controlJPanel);
        controlJPanelLayout.setHorizontalGroup(
        	controlJPanelLayout.createParallelGroup(Alignment.LEADING)
        		.addGroup(controlJPanelLayout.createSequentialGroup()
        			.addContainerGap()
        			.addGroup(controlJPanelLayout.createParallelGroup(Alignment.LEADING)
        				.addGroup(Alignment.TRAILING, controlJPanelLayout.createSequentialGroup()
        					.addGroup(controlJPanelLayout.createParallelGroup(Alignment.TRAILING)
        						.addComponent(createPerson, Alignment.LEADING, GroupLayout.DEFAULT_SIZE, 133, Short.MAX_VALUE)
        						.addComponent(guardarPersona, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        					.addGap(24))
        				.addGroup(controlJPanelLayout.createSequentialGroup()
        					.addComponent(viewPerson)
        					.addContainerGap(26, Short.MAX_VALUE))
        				.addGroup(Alignment.TRAILING, controlJPanelLayout.createSequentialGroup()
        					.addGroup(controlJPanelLayout.createParallelGroup(Alignment.TRAILING)
        						.addComponent(sigPerfil, Alignment.LEADING, GroupLayout.DEFAULT_SIZE, 131, Short.MAX_VALUE)
        						.addComponent(antPerfil, GroupLayout.DEFAULT_SIZE, 131, Short.MAX_VALUE))
        					.addGap(26))
        				.addGroup(controlJPanelLayout.createSequentialGroup()
        					.addComponent(cargarPersona)
        					.addContainerGap(34, Short.MAX_VALUE))))
        );
        controlJPanelLayout.setVerticalGroup(
        	controlJPanelLayout.createParallelGroup(Alignment.LEADING)
        		.addGroup(controlJPanelLayout.createSequentialGroup()
        			.addGap(123)
        			.addComponent(createPerson)
        			.addPreferredGap(ComponentPlacement.UNRELATED)
        			.addComponent(guardarPersona)
        			.addPreferredGap(ComponentPlacement.RELATED)
        			.addComponent(cargarPersona)
        			.addGap(86)
        			.addComponent(viewPerson)
        			.addPreferredGap(ComponentPlacement.UNRELATED)
        			.addComponent(antPerfil)
        			.addPreferredGap(ComponentPlacement.RELATED)
        			.addComponent(sigPerfil)
        			.addContainerGap(95, Short.MAX_VALUE))
        );
        controlJPanel.setLayout(controlJPanelLayout);

        jSplitPane1.setLeftComponent(controlJPanel);

        javax.swing.GroupLayout displayJPanelLayout = new javax.swing.GroupLayout(displayJPanel);
        displayJPanel.setLayout(displayJPanelLayout);
        displayJPanelLayout.setHorizontalGroup(
            displayJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 515, Short.MAX_VALUE)
        );
        displayJPanelLayout.setVerticalGroup(
            displayJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 472, Short.MAX_VALUE)
        );

        jSplitPane1.setRightComponent(displayJPanel);

        getContentPane().add(jSplitPane1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void createPersonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createPersonActionPerformed
        // TODO add your handling code here:
        CreateJPanel createJPanel= new CreateJPanel(person);
        jSplitPane1.setRightComponent(createJPanel);
        
        
    }//GEN-LAST:event_createPersonActionPerformed

    private void viewPersonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewPersonActionPerformed
        // TODO add your handling code here:
        
        DisplayJPanel viewJPanel= new DisplayJPanel(listaPersonas.get(contador));
        jSplitPane1.setRightComponent(viewJPanel);
        
        
    }//GEN-LAST:event_viewPersonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel controlJPanel;
    private javax.swing.JButton createPerson;
    private javax.swing.JPanel displayJPanel;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JButton viewPerson;
}
